#!/bin/bash

# Display usage message.
usage()
{
    printf "%b"                                                                \
    "Create default templates for files.\n\n"                                  \
                                                                               \
    "Usage:\n"                                                                 \
    "  new [option]... <filename>...\n\n"                                      \
                                                                               \
    "Arguments:\n"                                                             \
    "  filename           name of the file to create.\n\n"                     \
                                                                               \
    "Options:\n"                                                               \
    "  -e, --edit         open <filename>s for editing in vim.\n"              \
    "  -f, --force        disable warnings.\n"                                 \
    "      --help         display this message and exit.\n"                    \
    "  -m, --make=TYPE    create a default makefile of TYPE; TYPE can be\n"    \
    "                     'c-project', 'cpp-project' or 'c-shared'.\n\n"       \
                                                                               \
    "Examples:\n"                                                              \
    "  new hello          create a file 'hello'.\n"                            \
    "  new hello.c        create a default C template.\n"                      \
    "  new -e hello       create a file 'hello' and open for editing in vim\n" \
    "  new -e hello.c     create a default C template file and open for\n"     \
    "                     editing in vim.\n"
}

# Returns 0 if $1 makefile type is in $MAKEFILE_TYPES.
makefile_supported()
{
    local type="$1"

    for make_type in "${MAKEFILE_TYPES[@]}"; do
        if [ "${make_type}" = "${type}" ]; then
            return 0
        fi
    done

    return 1
}

# Copy $1 template from templates directory into $2 file.
copy_template()
{
    local template="${TEMPLATES}/$1"
    local filename="$2"

    # if filename doesn't exist in pwd
    if [ ! -f "$(pwd)/${filename}" ]; then
        # if template doesn't exist
        if [ ! -f "${template}" ]; then
            echo "${SCRIPT}: template not found '${template}'" >&2
        else
            cp "${template}" "${filename}"
        fi
    else
        if [ "${FLAGS[force]}" = 'true' ]; then
            cp "${template}" "${filename}"
        else
            printf "%b" \
            "${SCRIPT}: file '${filename}' already exists\nRewrite? [y/n]: "
            read -r ans
            if [ "${ans}" = 'y' ] || [ "${ans}" = 'Y' ]; then
                cp "${template}" "${filename}"
            fi
        fi
    fi
}
