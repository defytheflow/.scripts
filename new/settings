#!/bin/bash

# Absolute import
. "$(dirname "$(realpath "$0")")"/helpers

SCRIPT='new'  # used in error messages
SHORT_OPTS='efm:'
LONG_OPTS='edit,force,help,make:'
HELP="Try '${SCRIPT} --help' for more information."

# Default templates must be in this directory.
TEMPLATES="$(dirname "$(realpath "$0")")/templates"
MAKEFILE_NAME='Makefile'
MAKEFILE_TYPES=('c-project' 'c-shared' 'cpp-project')

# Each flag is either ON (true) or OFF (false).
declare -A FLAGS=(
    [edit]='false'   # -e, --edit
    [force]='false'  # -f, --force
)

# Each option has a string argument.
declare -A OPTS=(
    [make]=''        # -m, --make
)

# Line numbers where cursor should appear if --edit flag is on.
declare -A CURSOR_LINE_NUMBERS=(
    [c]=6
    [cpp]=10
    [html]=12
    [py]=7
)

# If getopt cound't parse options:
if ! ARGV=$(getopt -o ${SHORT_OPTS} -l ${LONG_OPTS} -- "$@"); then
    echo "${HELP}" >&2
    exit 1
fi

eval set -- "${ARGV}"

while true; do
    case $1 in
        -e | --edit)
            FLAGS[edit]='true' ;;
        -f | --force)
            FLAGS[force]='true' ;;
        --help)
            usage
            exit 0
            ;;
        -m | --make)
            shift
            if ! makefile_supported "$1"; then
                echo "${SCRIPT}: invalid argument '$1' for '--make'" >&2
                echo 'Valid arguments are:'
                printf "  - '%s'\n" "${MAKEFILE_TYPES[@]}"
                echo "${HELP}" >&2
                exit 1
            fi
            OPTS[make]="$1"
            ;;
        --)
            shift
            break
            ;;
    esac
    shift
done
