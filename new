#!/bin/bash

usage() {
    echo -e "Creates default templates for source-code files.\n"
    echo "Usage:"
    echo -e "  new [options] <file>...\n"
    echo "Arguments:"
    echo "  file          name of the file to create"
    echo ""
    echo "Options:"
    echo "  -e, --edit                  open <file> for editing in vim"
    echo "  -h, --help                  displays a usage message"
    echo "  -m <lang>, --make <lang>    generates a default makefile for <lang>"
    echo ""
}

HELP_MESSAGE="Try: 'new -h | --help' for more information"

declare -A FLAGS=(
    [edit]=0
    [make]=""
)

# You must put your templates inside this directory,
# 'new' looks them up and copies from there.
TEMPLATES=/usr/share/templates/

# Line number where cursor should appear if -e flag is on
declare -A CURSOR_LINE_NUMBERS=(
    ["c"]="6"
    ["cpp"]="8"
    ["html"]="8"
    ["py"]="5"
    ["sh"]="3"
)

SUPPORTED_MAKEFILES=(c cpp)

# Returns 0 if $1 is in $MAKEFILES
makefile_supported() {

    for lang in ${SUPPORTED_MAKEFILES[@]}; do
        if [[ "$lang" == "$1" ]]; then
            return 0
        fi
    done
    return 1

}

# Copies $1 template from $TEMPLATES directory into $2 file
copy_template() {
    # $1 - name of template, $2 - name of new file

    if [[ ! -f $(pwd)/$2 ]]; then

        if [[ ! -f $TEMPLATES/$1 ]]; then
            echoerr "Error: template not found '$TEMPLATES/$1'"
        else
            cp $TEMPLATES/$1 $2
        fi

    else

        echo "Warning: file already exists '$2'"
        echo -n "Rewrite ? [y/n]: "
        read ans
        if [[ "$ans" =~ ^[yY]$ ]]; then
            cp $TEMPLATES/$1 $2
        fi

    fi

}

# Check that $TEMPLATES_DIR exists
if [[ ! -d $TEMPLATES ]]; then
    echoerr "Error: unable to find '$TEMPLATES' directory"
    echoerr "Fix: create '$TEMPLATES' directory"
    exit 1
fi

# Parse options
short_options="ehm:"
long_options="edit,help,make:"

options=$(getopt -o $short_options -l $long_options -- "$@")

if [[ $? -ne 0 ]]; then
    echoerr $HELP_MESSAGE
    exit 1
fi

eval set -- "$options"  # sets $options as script arguments

# Set options
while true; do
    case $1 in
        -e | --edit)
            FLAGS[edit]=1   ;;
        -h | --help)
            usage
            exit 0          ;;
        -m | --make)
            shift
            if ! makefile_supported $1; then
                echoerr "Error: '$1' makefile is not supported."
                echoerr "Supported makefiles: ${SUPPORTED_MAKEFILES[@]}"
                echoerr $HELP_MESSAGE
                exit 1
            fi
            FLAGS[make]=$1 ;;
        --)
            shift
            break          ;;
    esac
    shift
done

# Check if <file> argument was given
if [[ $# -lt 1 ]]; then
    echoerr "Error: missing <file> argument"
    echoerr $HELP_MESSAGE
    exit 1
fi

if [[ -n ${FLAGS[make]} ]]; then
    copy_template ${FLAGS[make]}-makefile $1
    shift
fi

# For each <file> argument
for file in $@; do

    # Extract the root part of file
    root=${file%.*}
    # Extract the extension of file
    ext=${file#$root}
    ext=${ext:1}  # remove leading '.'

    # If no extension
    if [[ -z $ext ]]; then
        touch $file
    else
        case $ext in
            asm | c | cpp | html | py | s | sh)
                copy_template $ext  $file
                ;;
            *)
                touch $file
                ;;
        esac
    fi

    if [[ ${FLAGS[edit]} -eq 1 ]]; then
        vim -c 'startinsert' $file "+${CURSOR_LINE_NUMBERS[$ext]}"
    fi

done
