#!/bin/bash

usage() {
    echo -e "Creates default templates for source-code files.\n"
    echo "Usage:"
    echo -e "  new [option] <filename>\n"
    echo "Arguments:"
    echo "  filename    name of the file to create"
    echo ""
    echo "Options:"
    echo "  -e           open <filename> for editing in vim"
    echo "  -h           displays a usage message"
    echo ""
}

# Options:

# -e
EDIT_FLAG=0

# You must put your templates inside this directory,
# 'new' looks them up and copies from there.
TEMPLATES=$HOME/.templates

# Line number where cursor should appear if -e flag is on
declare -A CURSOR_LINE_NUMBERS=(
    ["c"]="6"
    ["cpp"]="8"
    ["html"]="8"
    ["py"]="5"
    ["sh"]="3"
)

HELP_MESSAGE="Try: 'new -h' for more information"

# Copies $1 template from $TEMPLATES directory into $2 file
copy_template() {
    # $1 - name of template, $2 - name of new file

    if [[ ! -f $(pwd)/$2 ]]; then

        if [[ ! -f $TEMPLATES/$1 ]]; then
            echoerr "Error: template not found '$TEMPLATES/$1'"
        else
            cp $TEMPLATES/$1 $2
        fi

    else

        echo "Warning: file already exists '$2'"
        echo -n "Rewrite ? [y/n]: "
        read ans
        if [[ "$ans" =~ ^[yY]$ ]]; then
            cp $TEMPLATES/$1 $2
        fi

    fi

}

# Check that $TEMPLATES_DIR exists
if [[ ! -d $TEMPLATES ]]; then
    echoerr "Error: unable to find '$TEMPLATES' directory"
    echoerr "Fix: create '$TEMPLATES' directory"
    exit 1
fi

# Parse options
while getopts ":eh" opt; do
    case $opt in
        h)
            usage
            exit 0 ;;
        e)
            EDIT_FLAG=1 ;;
        \?)
            echoerr "Error: unknown option '$OPTARG'"
            echoerr $HELP_MESSAGE
            exit 1 ;;
    esac
done

# Remove parsed options from arguments array ($@)
shift $(( OPTIND - 1 ))

# Check if <filename> argument was given
if [[ $# -lt 1 ]]; then
    echoerr "Error: missing <filename> argument"
    echoerr $HELP_MESSAGE
    exit 1
fi

# For each <filename> argument
for filename in $@; do

    # Extract the root part of filename
    root=${filename%.*}
    # Extract the extension of filename
    ext=${filename#$root}
    ext=${ext:1}  # remove leading '.'

    # If no extension
    if [[ -z $ext ]]; then

        case $root in
            c-makefile | cpp-makefile | lesson-plan)
                copy_template $root  $filename
                ;;
            *)
                touch $filename
                ;;
        esac

    else

        case $ext in
            asm | c | cpp | html | py | s | sh)
                copy_template $ext  $filename
                ;;
            *)
                touch $filename
                ;;
        esac

    fi

    if [[ $EDIT_FLAG -eq 1 ]]; then
        vim -c 'startinsert' $filename "+${CURSOR_LINE_NUMBERS[$ext]}"
    fi

done
