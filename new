#!/bin/bash

# TODO - first creates lessons, then makefiles
#        implement options that take 2 arguments somehow :)

usage()
{
    echo -e "Creates default templates for files.\n"
    echo "Usage:"
    echo -e "  new [options] <file>...\n"
    echo "Arguments:"
    echo "  file                        name of the file to create."
    echo "  lang                        c, cpp"
    echo ""
    echo "Options:"
    echo "  -e, --edit                  open <file> for editing in vim."
    echo "  -f, --force                 disables warnings."
    echo "  -h, --help                  displays a usage message."
    echo "  -l, --lesson                generates a default lesson plan."
    echo "  -m <lang>, --make <lang>    generates a default makefile for <lang>."
    echo ""
    echo "Examples:"
    echo "  new hello                   just creates a file 'hello'"
    echo "  new hello.c                 creates a default C template."
    echo "  new hello.c hello.py        creates C and Python default templates."
    echo "  new -m c Make               creates a defaut  C makefile."
    echo "  new --make=cpp Makefile     creates a default C++ makefile."
    echo "  new -e file                 creates 'file' and opens in vim"
    echo "  new --edit hello.py         creates a default Python template and"
    echo "                              opens it for editing in vim."
    echo ""
    echo "Author:"
    echo -e "  Artyom Danilov\n"
}

## GLOBAL VARIABLES

# Default templates must reside in this directory.
TEMPLATES="/usr/share/templates/"

SUPPORTED_MAKEFILES=(c cpp)

HELP_MESSAGE="Try: 'new -h | --help' for more information"

declare -A FLAGS=(

    [edit]=0    # -e, --edit
    [force]=0   # -f, --force
    [lesson]=0  # -l, --lesson
    [make]=""   # -m, --make

)

# Line numbers where cursor should appear if --edit flag is on
declare -A CURSOR_LINE_NUMBERS=(

    ["c"]=6
    ["cpp"]=8
    ["html"]=8
    ["py"]=5

)

## FUNCTION DECLARATIONS

# Returns 0 if $1 is in $MAKEFILES
makefile_supported() {

    for lang in ${SUPPORTED_MAKEFILES[@]}; do
        if [[ "$lang" == "$1" ]]; then
            return 0
        fi
    done
    return 1

}

# Copies $1 template from $TEMPLATES directory into $2 file
copy_template() {

    local template="$TEMPLATES/$1"
    local file=$2

    if [[ ! -f $(pwd)/$file ]]; then

        if [[ ! -f $template ]]; then
            echoerr "Error: template not found '$template'"
        else
            cp $template $file
        fi

    else

        if [[ ${FLAGS[force]} -eq 1 ]]; then
            cp $template $file
        else
            echo "Warning: file already exists '$file'"
            read -ep "Rewrite ? [y/n]: " ans
            [[ "$ans" =~ ^[yY]$ ]] && cp $template $file
        fi

    fi

}

## VALIDATION

# Check that $TEMPLATES directory exists
if [[ ! -d $TEMPLATES ]]; then
    echoerr "Error: unable to find '$TEMPLATES' directory"
    echoerr "Fix: create '$TEMPLATES' directory and fill it with your templates"
    exit 1
fi

## PARSE OPTIONS

short_options="efhlm:"
long_options="edit,force,help,lesson,make:"

options=$(getopt -o $short_options -l $long_options -- "$@")

if [[ $? -ne 0 ]]; then
    echoerr $HELP_MESSAGE
    exit 1
fi

eval set -- "$options"  # sets $options as script arguments

## SET UP OPTIONS
while true; do
    case $1 in
        -e | --edit)
            FLAGS[edit]=1   ;;
        -f | --force)
            FLAGS[force]=1  ;;
        -h | --help)
            usage
            exit 0          ;;
        -l | --lesson)
            FLAGS[lesson]=1 ;;
        -m | --make)
            shift
            if ! makefile_supported $1; then
                echoerr "Error: '$1' makefile is not supported."
                echoerr "Supported makefiles: ${SUPPORTED_MAKEFILES[@]}"
                echoerr $HELP_MESSAGE
                exit 1
            fi
            FLAGS[make]=$1 ;;
        --)
            shift
            break          ;;
    esac
    shift
done

## VALIDATION

# Check if <file> argument was given
if [[ $# -lt 1 ]]; then
    echoerr "Error: missing <file> argument"
    echoerr $HELP_MESSAGE
    exit 1
fi

## MAIN JOB

# First create lessons
if [[ ${FLAGS[lesson]} -eq 1 ]]; then
    copy_template lesson-plan $1
    shift
fi

# Create Makefiles
if [[ $# -gt 0 && -n ${FLAGS[make]} ]]; then
    copy_template ${FLAGS[make]}-makefile $1
    shift
fi

# If still have files to create
if [[ $# -gt 0 ]]; then

    # For each <file> argument
    for file in $@; do

        # Extract the root part of file
        root=${file%.*}

        # Extract the extension of file
        ext=${file#$root}
        ext=${ext:1}  # remove leading '.'

        case $ext in
            asm | c | cpp | html | py | s | sh)
                copy_template $ext  $file
                ;;
            *)
                touch $file
                ;;
        esac

    done

    # Open the first file after Makefile for editing
    if [[ ${FLAGS[edit]} -eq 1 ]]; then
        vim -c 'startinsert' $1 "+${CURSOR_LINE_NUMBERS[$ext]}"
    fi

fi

exit 0
